'use strict';

let message = "hello";
message = 123456;  //«динамически типизированными» -- означает, что типы данных есть, но переменные не привязаны ни к одному из них.
/* == ПРИМИТИВНЫЕ ТИПЫ ДАННЫХ === */
// ЧИСЛА
//1. Infinity -- представляет собой математическую бесконечность ∞. Это особое значение, которое больше любого числа.
alert( 1 / 0 );

alert( Infinity );

//2. NaN - означает вычислительную ошибку. Это результат неправильной или неопределённой математической операции
//есть только одно исключение: NaN ** 0 равно 1
alert( "не число" / 2 );

//3. BigInt - при значениях более 2 в 53 степени. Используются в криптографии и при использовании метки времени («timestamp») с микросекундами
const bigInt = 1234567890123456789012345678901234567890n;

// СТРОКИ
let str = "Привет";
let str2 = 'Одинарные кавычки тоже подойдут';
let phrase = `Обратные кавычки позволяют встраивать переменные ${str}`; // используется ИНТЕРПОЛЯЦИЯ при обратных ковычках

//BOOLEAN
let nameFieldChecked = true; // да, поле отмечено
let ageFieldChecked = false; // нет, поле не отмечено

//NULL
let age = null; //Это просто специальное значение, которое представляет собой «ничего», «пусто» или «значение неизвестно».

//UNDEFINED
let ages;

alert(ages); // выведет "undefined"

/* == ОБЪЕКТЫ == */
typeof Math // "object"  (1) это встроенный объект, который предоставляет математические операции и константы.

typeof null // "object"  (2)официально признанная ошибка в typeof, ведущая начало с времён создания JavaScript и сохранённая для совместимости

typeof alert // "function"  (3) возвращает "function", потому что alert является функцией. 

/* == ЗАДАНИЕ == */
let name = "Ilya";

alert( `hello ${1}` ); // hello 1

alert( `hello ${"name"}` ); // hello name

alert( `hello ${name}` ); // hello Ilya